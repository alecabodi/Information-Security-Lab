theory EncryptedDH2
begin

/* Signed Diffie-Hellman protocol, second attempt:
   A -> B : aenc_B{A, g^x}  (x fresh)
   B -> A : aenc_A{B, g^y, h(g^x)}  (y fresh)
   A -> B : aenc_B{A, h(g^y)}  */


/* ----------------- */
/* Equational theory */
/* ----------------- */

/* Load the built-in Diffie-Hellman, asymmetric encryption and hashing equational theories */
builtins: diffie-hellman, asymmetric-encryption, hashing



/* ------------------ */
/* Key infrastructure */
/* ------------------ */

rule genkey: 
   [ Fr(~kA) ] 
   -->
   [ !Key($A, ~kA),  
     !Pk($A, pk(~kA)),
     Out(pk(~kA)) ]


/* Question 6*/

/*----------------*/
/* Protocol rules */
/*----------------*/


rule Init_1:
  let gxI = 'g'^~xI in
   [ Fr(~xI), !Pk(b, pkB), !Key(A, kA) ]
   --[ SecretI(A, b, kA), SecretI(A, b, ~xI) ]->      
   [ Init_1(A, ~xI, gxI, pkB, kA), Out(aenc(<A, gxI>, pkB)) ] 

rule Resp_1:
  let gyR = 'g'^~yR
      dec1 = adec(enc1, kB)
      a = fst(dec1) 
      X = snd(dec1)
      kR = X^~yR in
   [ Fr(~yR), !Pk(a, pkA), !Key(B, kB), In(enc1) ]
   --[ SecretR(B, a, kB), SecretR(B, a, ~yR), RunningR(B, a, kR) ]->      
   [ Resp_1(B, ~yR, gyR, X, kR, pkA, kB), Out(aenc(<B, <gyR, h(X)>>, pkA)) ]

rule Init_2:
  let dec2 = adec(enc2, kA)
      b = fst(dec2)
      dec2snd = snd(dec2)
      Y = fst(dec2snd)
      hashX = snd(dec2snd)
      kI = Y^~xI in            
   [ Init_1(A, ~xI, gxI, pkB, kA), !Pk(b, pkB), !Key(A, kA), In(<enc2>) ]
   --[ FinishedI(A), SecretI(A, b, kI), Eq(hashX, h(gxI)), CommitI(A, b, kI), RunningI(A, b, kI) ]->       
   [ Init_2(A, ~xI, gxI, Y, kI), Out(aenc(<A, h(Y)>, pkB)) ]

rule Resp_2:
  let dec3 = adec(enc3, kB) 
      a = fst(dec3)
      hashY = snd(dec3) in         
   [ Resp_1(B, ~yR, gyR, X, kR, pkA, kB), !Pk(a, pkA), !Key(B, kB), In(<enc3>) ]
   --[ FinishedR(B), SecretR(B, a, kR), Eq(hashY, h(gyR)), CommitR(B, a, kR) ]->       
   [ Resp_2(B, ~yR, gyR, X, kR) ]


/* ---------- */
/* Key Reveal */
/* ---------- */

rule Attacker:           
   [ !Key(A, k) ]
   --[ Compromised(A) ]->       
   [ Out(k) ]


/* ---------- */
/* Restrictions */
/* ---------- */

restriction equality:
"All x y #i. Eq(x,y) @i ==> x = y"


/* ---------- */
/* Properties */
/* ---------- */

/* Executability checks */
lemma executableI:
exists-trace "Ex #i A. FinishedI(A) @ i & not (Ex #j B. Compromised(B)@j)"

lemma executableR:
exists-trace "Ex #i B. FinishedR(B) @ i & not (Ex #j B. Compromised(B)@j)"


/* Secrecy and agreement properties */

lemma key_secrecyI:
"All #i A B k.
 (SecretI(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"

lemma key_secrecyR:
"All #i A B k.
 (SecretR(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"


lemma agreementR:
"All #i A B k.
  (CommitR( B, A, k) @ i &
   not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
   ==> (Ex #j. RunningI(A, B, k) @ j & j < i)"

lemma agreementI:
"All #i A B k.
  (CommitI( A, B, k) @ i &
   not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
   ==> (Ex #j. RunningR(B, A, k) @ j & j < i)"


end



