theory IKEv1
begin

/* IKEv1 protocol:
   A -> B : aenc_B{A}, aenc_B{N_A}, g^x  (N_A fresh nonce, x fresh)
   B -> A : aenc_A{B}, aenc_A{N_B}, g^y, HASH_B  (y fresh)
   A -> B : HASH_A
where:
   HASH_A = prf(<skID, g^x, g^y, A, B>)
   HASH_B = prf(<skID, g^y, g^x, B, A>)
   skID = prf(<h(<N_A, N_B>), A, B>)

     */


/* ----------------- */
/* Equational theory */
/* ----------------- */

/* Load the built-in Diffie-Hellman and signature equational theories */
builtins: diffie-hellman, asymmetric-encryption, hashing

/*Define an abstract function prf with no additional algebraic properties
representing a "perfect" pseudo-random function. */
functions: prf/1


/* ------------------ */
/* Key infrastructure */
/* ------------------ */

rule genkey:
   [ Fr(~kA) ] 
   -->
   [ !Key($A, ~kA),
     !Pk($A, pk(~kA)),
     Out(pk(~kA)) ]



/* Question 7*/

/*----------------*/
/* Protocol rules */
/*----------------*/

rule Init_1:
  let gxI = 'g'^~xI in
   [ Fr(~xI), Fr(~Na), !Pk(b, pkB), !Key(A, kA) ]
   -->      
   [ Init_1(A, ~xI, gxI, pkB, kA, ~Na), Out(<<aenc(A, pkB), aenc(~Na, pkB)>, gxI>) ] 

rule Resp_1:
  let gyR = 'g'^~yR
      a = adec(fst(enc1), kB)
      na = adec(snd(enc1), kB)
      skID1 = prf(<<h(<na, ~Nb>), a>, B>)
      HASH_B = prf(<<<<skID1, gyR>, X>, B>, a>)
      kR = prf(<skID1, X^~yR>)
      in 
   [ Fr(~yR), Fr(~Nb), !Pk(a, pkA), !Key(B, kB), In(<enc1, X>) ]
   --[ RunningR(B, a, kR) ]->      
   [ Resp_1(B, ~yR, gyR, X, kR, pkA, kB, na, ~Nb, skID1, a), Out(<<<aenc(B, pkA), aenc(~Nb, pkA)>, gyR>, HASH_B>) ]

rule Init_2:
  let b = adec(fst(enc2), kA)
      nb = adec(snd(enc2), kA) 
      skID2 = prf(<<h(<~Na, nb>), A>, b>)
      HASH_A = prf(<<<<skID2, gxI>, Y>, A>, b>)
      kI = prf(<skID2, Y^~xI>) in            
   [ Init_1(A, ~xI, gxI, pkB, kA, ~Na), !Pk(b, pkB), !Key(A, kA), In(<<enc2, Y>, hash_b>) ]
   --[ FinishedI(A), SecretI(A, b, kI), Eq(hash_b, prf(<<<<skID2, Y>, gxI>, b>, A>)), CommitI(A, b, kI), RunningI(A, b, kI) ]->       
   [ Init_2(A, ~xI, gxI, Y, kI), Out(HASH_A) ]

rule Resp_2:        
   [ Resp_1(B, ~yR, gyR, X, kR, pkA, kB, na, ~Nb, skID1, a), !Pk(a, pkA), !Key(B, kB), In(<hash_a>) ]
   --[ FinishedR(B), SecretR(B, a, kR), Eq(hash_a, prf(<<<<skID1, X>, gyR>, a>, B>)), CommitR(B, a, kR) ]->       
   [ Resp_2(B, ~yR, gyR, X, kR) ]


/* ---------- */
/* Key Reveal */
/* ---------- */

rule Attacker:           
   [ !Key($A, k) ]
   --[ Compromised($A) ]->       
   [ Out(k) ]


/* ---------- */
/* Restrictions */
/* ---------- */

restriction equality:
"All x y #i. Eq(x,y) @i ==> x = y"


/* ---------- */
/* Properties */
/* ---------- */

/* Executability checks */
lemma executableI:
exists-trace "Ex #i A. FinishedI(A) @ i & not (Ex #j B. Compromised(B)@j)"

lemma executableR:
exists-trace "Ex #i B. FinishedR(B) @ i & not (Ex #j B. Compromised(B)@j)"


/* Secrecy and agreement properties */

lemma key_secrecyI:
"All #i A B k.
 (SecretI(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"

lemma key_secrecyR:
"All #i A B k.
 (SecretR(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"


lemma agreementR:
"All #i A B k.
  (CommitR( B, A, k) @ i &
   not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
   ==> (Ex #j. RunningI(A, B, k) @ j & j < i)"

lemma agreementI:
"All #i A B k.
  (CommitI( A, B, k) @ i &
   not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
   ==> (Ex #j. RunningR(B, A, k) @ j & j < i)"



/* Perfect Forward Secrecy:  (Question 8)
Please uncomment the following two lemmas for this question.
*/


lemma secrecy_PFS_R:
 " All A B k #i. 
    SecretR(A, B, k) @i &
      not ((Ex #l. (Compromised(A) @ l & l<i )) | (Ex #m. (Compromised(B) @ m & m < i)) )  
    ==> not (Ex #j. K(k)@j )"


lemma secrecy_PFS_I:
 " All A B k #i. 
    SecretI(A, B, k) @i &
      not ((Ex #l. (Compromised(A) @ l & l<i )) | (Ex #m. (Compromised(B) @ m & m < i)) )  
    ==> not (Ex #j. K(k)@j )"


end



